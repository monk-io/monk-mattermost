---
namespace: mattermost-enterprise

database:
  defines: runnable
  metadata:
    name: PostgreSQL
    website: https://www.postgresql.org
    source: https://github.com/postgres
    publisher: monk.io
    icon: https://www.postgresql.org/media/img/about/press/elephant.png
    tags: frameworks, object-relational, indexing, data types, query optimization, postgresql, security, open-source, mvcc, community
    description: |
      PostgreSQL is a powerful open-source object-relational database management system (DBMS) that provides robustness, reliability, and performance to meet the demanding needs of enterprise-level applications. It was first released in 1989 and has since become one of the most popular and widely used relational databases in the world.
      One of the key features of PostgreSQL is its flexibility, which allows it to be used in a wide range of applications, from small-scale projects to large, complex enterprise systems. It supports a wide range of data types, including arrays, hstore, and JSON, and provides advanced indexing and query optimization features to ensure fast and efficient data retrieval.
      PostgreSQL also has a strong reputation for data security and integrity, with support for advanced security features like row-level security, data masking, and encryption. It also supports multi-version concurrency control (MVCC), which allows multiple transactions to access and modify data concurrently without interfering with each other.
      In addition to its powerful features, PostgreSQL has a large and active community of developers and users who contribute to its development and provide support through forums, mailing lists, and other channels. It is available on multiple platforms, including Linux, Windows, and macOS, and can be used with a wide range of programming languages and frameworks, making it a versatile and reliable choice for database management in a wide range of applications.
    private: true
  services:
    postgres:
      container: postgres
      port: 5432
      protocol: tcp
  containers:
    postgres:
      image: postgres
      image-tag: <- $image_tag
      paths:
        - <- `${monk-volume-path}/postgresql:/var/lib/postgresql/data`      
  variables:
    db_username:
      env: POSTGRES_USER
      value: <- $database-user default("mattermost")
      type: string
    db_password:
      env: POSTGRES_PASSWORD
      value: <- $database-password default("password")
      type: string
    db_name:
      env: POSTGRES_DB
      value: <- $database-name default("mattermost")
      type: string
    image_tag:
      type: string
      value: <- $postgres-image-tag default("12.2")

nginx:
  defines: runnable
  metadata:
    publisher: monk.io
    email: jakub@monk.io
    tags: ssl, certbot, webserver, nginx
    icon: https://assets.monk.io/icons/nginx-logo-FF65602A76-seeklogo.com.png
    description: Standard webserver with a certbot container as sidecar to generate letsencrypt certificate
    name: NGINX Server with Certbot
    version: 1.0
    website: https://www.nginx.com/
    source: https://github.com/nginx/nginx
    private: true
  depends:
    wait-for:
      runnables:
        - mattermost-enterprise/mattermost
  services:
    nginx:
      container: nginx-reverse-proxy
      port: <- $listen-port
      protocol: tcp
      host-port: <- $listen-port
  connections:
    mattermost:
      runnable: mattermost-enterprise/mattermost
      service: mattermost
  files:
    server-def:
      contents: |
        server {
          listen 0.0.0.0:{{ v "listen-port" }};
          location / {
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $host;
            proxy_pass http://{{ v "proxy-target-host" }}:8065;
          }
        }
      mode: 0644
      path: /opt/bitnami/nginx/conf/server_blocks/reverse_proxy.conf
      container: nginx-reverse-proxy
  containers:
    nginx-reverse-proxy:
      image-tag: <- $nginx-image
      image: docker.io/bitnami/nginx
      cap-add:
        - CAP_NET_BIND_SERVICE
  variables:
    proxy-target-host:
      value: <- connection-hostname("mattermost")
      type: string
    listen-port:
      value: <- $nginx-listen-port default(80)
      type: int
    server-name:
      value: <- $mattermost-server-name
      type: string
    nginx-image:
      value: <- $nginx-image-tag default("latest")
      type: string

mattermost:
  defines: runnable
  metadata:
    name: mattermost
    description: |
      Mattermost is an open-source, self-hosted messaging and collaboration platform that allows teams to communicate and collaborate in real-time. It is similar to other messaging platforms like Slack and Microsoft Teams, but with the added benefit of being self-hosted, giving teams more control over their data and security.
      Mattermost offers a range of features, including group messaging, file sharing, video conferencing, and integrations with other tools like Jira, GitHub, and Trello. It also has a robust notification system that allows users to customize their alerts and stay up-to-date on important conversations.
      One of the key benefits of Mattermost is its flexibility. It can be customized to fit the specific needs of a team or organization, with options for custom branding, integrations, and plugins. It also offers a range of deployment options, including cloud-based, on-premise, and hybrid solutions.
      Overall, Mattermost is a powerful messaging and collaboration tool that can help teams stay connected and productive, while also providing the security and control that many organizations require.
    tags: self hosted, communication, workflow orchestration, collaboration
    website: https://mattermost.com/
    source: https://github.com/mattermost/mattermost-server
    publisher: monk.io
    icon: https://pbs.twimg.com/profile_images/1524820253938696199/NvcFnuZX_400x400.png
    version: 1.0
    private: true
  services:
    mattermost:
      container: mattermost
      port: 8065
      protocol: tcp
  connections:
    postgres:
      runnable: mattermost-enterprise/database
      service: postgres
  containers:
    mattermost:
      image: mattermost/mattermost-enterprise-edition
      image-tag: <- $mattermost_image
      paths:
        - <- `${monk-volume-path}/mattermost/${MATTERMOST_CONFIG_PATH}:/var/lib/mattermost/config`
        - <- `${monk-volume-path}/mattermost/${MATTERMOST_DATA_PATH}:/var/lib/mattermost/data`
        - <- `${monk-volume-path}/mattermost/${MATTERMOST_LOGS_PATH}:/var/lib/mattermost/logs`
        - <- `${monk-volume-path}/mattermost/${MATTERMOST_PLUGINS_PATH}:/var/lib/mattermost/plugins`
        - <- `${monk-volume-path}/mattermost/${MATTERMOST_CLIENT_PLUGINS_PATH}:/var/lib/mattermost/client/plugins`
        - <- `${monk-volume-path}/mattermost/${MATTERMOST_BLEVE_INDEXES_PATH}:/var/lib/mattermost/bleve-indexes`
  depends:
    wait-for:
      runnables:
        - mattermost-enterprise/database
      timeout: 30
  variables:
    TZ:
      env: TZ
      type: string
      value: UTC
    MM_SQLSETTINGS_DRIVERNAME:
      env: MM_SQLSETTINGS_DRIVERNAME
      type: string
      value: postgres
    MM_BLEVESETTINGS_INDEXDIR:
      env: MM_BLEVESETTINGS_INDEXDIR
      type: string
      value: /mattermost/bleve-indexes
    MM_SERVICESETTINGS_SITEURL:
      env: MM_SERVICESETTINGS_SITEURL
      type: string
      value: <- `https://${mattermost-server-name}`
    MM_SQLSETTINGS_DATASOURCE:
      env: MM_SQLSETTINGS_DATASOURCE
      type: string
      value: <- `postgres://${db_username}:${db_password}@${db_host}:5432/${db_name}?sslmode=disable&connect_timeout=10`
    db_username:
      value: <- $database-user default("mattermost")
      type: string
    db_password:
      value: <- $database-password default("password")
      type: string
    db_name:
      value: <- $database-name default("mattermost")
      type: string
    MATTERMOST_CONFIG_PATH:
      type: string
      value: config
    MATTERMOST_DATA_PATH:
      type: string
      value: data
    MATTERMOST_LOGS_PATH:
      type: string
      value: logs
    MATTERMOST_PLUGINS_PATH:
      type: string
      value: plugins
    MATTERMOST_CLIENT_PLUGINS_PATH:
      type: string
      value: client/plugins
    MATTERMOST_BLEVE_INDEXES_PATH:
      type: string
      value: bleve-indexes
    mattermost_image:
      type: string
      value: <- $mattermost-image-tag default("latest")
    db_host:
      type: string
      value: <- connection-hostname("postgres")
